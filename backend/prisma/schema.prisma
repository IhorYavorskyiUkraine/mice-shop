generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("POSTGRES_URL")
}

model User {
   id           Int           @id @default(autoincrement())
   displayName  String
   email        String        @unique
   password     String
   role         UserRole      @default(USER)
   refreshToken RefreshToken?
   orders       Order[]
   reviews      Review[]
   liked        Product[]
   cart         Cart?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Cart {
   id       Int       @id @default(autoincrement())
   products Product[]
   total    Float
   user     User      @relation(fields: [userId], references: [id])
   userId   Int       @unique

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Product {
   id          Int      @id @default(autoincrement())
   name        String
   price       Float
   quantity    Int
   orders      Order[]
   image       String
   rating      Float    @default(0)
   colors      String[]
   models      String[]
   specs       Specs[]
   description String
   reviews     Review[]
   brand       String
   user        User?    @relation(fields: [userId], references: [id])
   userId      Int?
   cart        Cart?    @relation(fields: [cartId], references: [id])
   cartId      Int?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Review {
   id        Int     @id @default(autoincrement())
   user      User    @relation(fields: [userId], references: [id])
   userId    Int
   product   Product @relation(fields: [productId], references: [id])
   productId Int
   rating    Int
   comment   String

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Specs {
   id        Int      @id @default(autoincrement())
   key       String
   value     String
   product   Product? @relation(fields: [productId], references: [id])
   productId Int?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Order {
   id       Int         @id @default(autoincrement())
   user     User        @relation(fields: [userId], references: [id])
   userId   Int
   products Product[]
   status   OrderStatus @default(PENDING)
   total    Float
   address  String
   phone    String
   email    String
   name     String

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model RefreshToken {
   id     Int    @id @default(autoincrement())
   token  String @unique
   user   User   @relation(fields: [userId], references: [id])
   userId Int    @unique

   createdAt DateTime @default(now())
   expiresAt DateTime
   updatedAt DateTime @updatedAt
}

model RevokedToken {
   id        String   @id @default(uuid())
   token     String   @unique
   createdAt DateTime @default(now())
}

enum UserRole {
   USER
   ADMIN
}

enum OrderStatus {
   PENDING
   PROCESSING
   DELIVERED
   CANCELLED
}
