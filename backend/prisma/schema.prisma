generator client {
   provider = "prisma-client-js"
}

datasource db {
   provider = "postgresql"
   url      = env("POSTGRES_URL")
}

model User {
   id Int @id @default(autoincrement())

   displayName  String
   email        String        @unique
   password     String
   role         UserRole      @default(USER)
   refreshToken RefreshToken?
   orders       Order[]
   reviews      Review[]
   cart         Cart?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Cart {
   id Int @id @default(autoincrement())

   items  CartItem[]
   total  Float
   user   User       @relation(fields: [userId], references: [id])
   userId Int        @unique

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model CartItem {
   id Int @id @default(autoincrement())

   model    Model @relation(fields: [modelId], references: [id])
   modelId  Int
   quantity Int
   price    Float
   cart     Cart? @relation(fields: [cartId], references: [id])
   cartId   Int?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Color {
   id Int @id @default(autoincrement())

   name String
   hex  String

   modelId Int?
   model   Model? @relation(fields: [modelId], references: [id])

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Model {
   id           Int        @id @default(autoincrement())
   name         String
   product      Product    @relation(fields: [productId], references: [id])
   productId    Int
   price        Float
   availability Int
   colors       Color[]
   specs        Specs[]
   cartItem     CartItem[]
   image        String

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Product {
   id          Int      @id @default(autoincrement())
   name        String
   orders      Order[]
   images      String[]
   rating      Float    @default(0)
   models      Model[]
   description String
   reviews     Review[]
   brand       Brand    @relation(fields: [brandId], references: [id])
   brandId     Int
   category    Category @relation(fields: [categoryId], references: [id])
   categoryId  Int

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Brand {
   id Int @id @default(autoincrement())

   name     String
   products Product[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Category {
   id Int @id @default(autoincrement())

   name     String
   products Product[]

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Review {
   id Int @id @default(autoincrement())

   user      User    @relation(fields: [userId], references: [id])
   userId    Int
   product   Product @relation(fields: [productId], references: [id])
   productId Int
   rating    Int
   comment   String

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Specs {
   id Int @id @default(autoincrement())

   key     String
   value   String
   model   Model? @relation(fields: [modelId], references: [id])
   modelId Int?

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model Order {
   id Int @id @default(autoincrement())

   user     User        @relation(fields: [userId], references: [id])
   userId   Int
   products Product[]
   status   OrderStatus @default(PENDING)
   total    Float
   address  String
   phone    String
   email    String
   name     String

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}

model RefreshToken {
   id     Int    @id @default(autoincrement())
   token  String @unique
   user   User   @relation(fields: [userId], references: [id])
   userId Int    @unique

   createdAt DateTime @default(now())
   expiresAt DateTime
   updatedAt DateTime @updatedAt
}

model RevokedToken {
   id        String   @id @default(uuid())
   token     String   @unique
   createdAt DateTime @default(now())
}

enum UserRole {
   USER
   ADMIN
}

enum OrderStatus {
   PENDING
   PROCESSING
   DELIVERED
   CANCELLED
}
